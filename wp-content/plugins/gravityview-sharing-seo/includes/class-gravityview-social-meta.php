<?php

/**
 * Integrate with the WordPress SEO plugin
 *
 * @since 1.0
 */
class GravityView_Social_Meta {

	/**
	 * @var GravityView_Social_Meta
	 */
	static $_instance;
	
	private function __construct() {

		$this->add_hooks();
	}

	/**
	 * @return GravityView_Social_Meta
	 */
	static function get_instance() {

		if( empty( self::$_instance ) ) {
			self::$_instance = new self;
		}

		return self::$_instance;
	}

	/**
	 * Add Frontend and Admin hooks
	 * @since 1.0
	 * @return void
	 */
	function add_hooks() {
		add_action( 'admin_init', array( $this, 'admin_view_hooks' ) );
		add_action( 'wp', array( $this, 'frontend_view_hooks' ) );
	}

	/**
	 * Add admin hooks
	 * @return void
	 */
	function admin_view_hooks() {

		// Add/modify fields in the WPSEO General tab
		add_filter( 'wpseo_metabox_entries_general', array( $this, 'modify_wpseo_metabox_fields' ), 10, 2 );

		// Add/modify fields in the WPSEO Social tab
		add_filter( 'wpseo_metabox_entries_social', array( $this, 'modify_wpseo_metabox_fields' ), 10, 2 );
		
	}

	/**
	 * Copy each setting in the WordPress SEO metabox so there's also a setting for Single Entry context
	 *
	 * Adds merge tags to Single Entry settings
	 *
	 * @param array $field_defs Field settings
	 * @param string $post_type Post type - inaccurate; we check it ourselves
	 *
	 * @return array Modified $field_defs, if `gravityview` post type
	 */
	public function modify_wpseo_metabox_fields( $field_defs, $post_type = '' ) {
		global $post;

		if ( empty( $post ) || 'gravityview' !== $post->post_type ) {
			return $field_defs;
		}

		$class = 'merge-tag-support mt-position-right mt-hide_all_fields ';

		$copy_fields = array(
			'title',
			'metadesc',
			'opengraph-title',
			'opengraph-description',
			'opengraph-image',
			'twitter-title',
			'twitter-description',
			'twitter-image',
			'google-plus-title',
			'google-plus-description',
			'google-plus-image',
		);

		foreach ( $field_defs as $key => $fielddef ) {

			$new_key = $key . '-gv-entry';

			if( in_array( $key, $copy_fields ) ) {

				$field_defs[ $new_key ] = $field_defs[ $key ];

				$field_defs[ $new_key ]['title'] = sprintf( __('%s (Single Entry)', 'gravityview-sharing-seo' ), $field_defs[ $new_key ]['title'] );

				$field_defs[ $new_key ]['class'] = isset( $field_defs[ $key ]['class'] ) ? $class . $field_defs[ $key ]['class'] : $class;

				$field_defs[ $key ]['title'] = sprintf( __('%s (Multiple Entries)', 'gravityview-sharing-seo' ), $field_defs[ $key ]['title'] );

			}

		}

		return $field_defs;
	}

	/**
	 * Add filters for the WordPress SEO metadata
	 */
	public function frontend_view_hooks() {

		$this->add_wordpress_seo_hooks();

		$this->add_jetpack_hooks();
		
	}

	private function add_jetpack_hooks() {
		add_filter('jetpack_open_graph_base_tags', array( $this, 'jetpack_opengraph_filter' ), 10, 2 );
	}

	/**
	 * Filter the OpenGraph data generated by Jetpack
	 *
	 * @param array $tags
	 * @param array $image_sizes
	 *
	 * @return array
	 */
	public function jetpack_opengraph_filter( $tags = array(), $image_sizes = array() ) {

		$return = $tags;

		$return['og:title'] = gravityview_social_get_title( $tags['og:title'] );
		$return['og:url'] = gravityview_social_get_permalink( $tags['og:url'] );

		return $return;
	}

	/**
	 * Add hooks for the WordPress SEO plugin social meta
	 */
	private function add_wordpress_seo_hooks() {

		add_filter( 'wpseo_canonical', 'gravityview_social_get_permalink' );
		add_filter( 'wpseo_og_og_url', 'gravityview_social_get_permalink' );

		$filters = array(
			'wpseo_title',
			'wpseo_metadesc',
			'wpseo_og_og_title',
			'wpseo_og_og_type',
			'wpseo_googleplus_desc',
			'wpseo_googleplus_title',
			'wpseo_googleplus_image',
			'wpseo_twitter_description',
			'wpseo_twitter_title',
			'wpseo_twitter_image',
			'wpseo_opengraph_image',
			'wpseo_opengraph_type',
			'wpseo_opengraph_desc',
			'wpseo_opengraph_title',
			'wp_seo_get_bc_title',
		);

		if( GravityView_frontend::is_single_entry() ) {

			foreach ( $filters as $filter ) {
				add_filter( $filter, array( $this, 'single_entry_filter_meta_value' ) );
			}
		}

	}

	/**
	 * Replace merge tags in the WordPress SEO settings
	 *
	 * @param string $value
	 *
	 * @return string
	 */
	public function process_merge_tags( $value ) {

		// No merge tags; don't waste the time.
		if( strpos( $value, '{') === false ) {
			return $value;
		}

		$single_entry = GravityView_frontend::is_single_entry();

		// No entry
		if( !$single_entry ) {
			return $value;
		}

		$entry = GFAPI::get_entry( $single_entry );

		// Getting the entry didn't work!
		if( is_wp_error( $entry ) ) {
			return $value;
		}

		$form = GFAPI::get_form( $entry['form_id'] );

		$return = GravityView_API::replace_variables( $value, $form, $entry );

		return $return;
	}

	/**
	 * Get the key for the data stored in WordPress SEO based on the current filter
	 * The filters correspond to the filters added in {@see  frontend_view_hooks() }
	 *
	 * @see WPSEO_Meta::get_value
	 *
	 * @param string $filter Current filter or action
	 * @return string
	 */
	private function get_wpseo_meta_filter_key( $filter = '' ) {

		$key = '';
		switch( $filter ) {

			case 'wpseo_title':
				$key = 'title';
				break;
			// Breadcrumb title
			case 'wp_seo_get_bc_title':
				$key = 'bctitle';
				break;
			case 'wpseo_metadesc':
				$key = 'metadesc';
				break;
			case 'wpseo_twitter_title':
				$key = 'twitter-title';
				break;
			case 'wpseo_twitter_description':
				$key = 'twitter-description';
				break;
			case 'wpseo_googleplus_desc':
				$key = 'google-plus-description';
				break;
			case 'wpseo_googleplus_title':
				$key = 'google-plus-title';
				break;
			case 'wpseo_googleplus_image':
				$key = 'google-plus-image';
				break;
			case 'wpseo_og_og_title':
				$key = 'opengraph-title';
				break;
			case 'wpseo_opengraph_desc':
			case 'wpseo_og_og_description':
				$key = 'opengraph-description';
				break;
			case 'wpseo_opengraph_image':
			case 'wpseo_og_og_image':
				$key = 'opengraph-image';
				break;
		}

		return $key;
	}

	/**
	 * @param string $value Existing value for the
	 *
	 * @return string
	 */
	public function single_entry_filter_meta_value( $value ) {

		$return = $value;

		$filter = current_action();

		// Replace titles with default title format
		if( preg_match('/.+_title$/', $filter ) ) {

			$return = gravityview_social_get_title( $return );
			$return = $this->process_merge_tags( $return );
		}

		$key = $this->get_wpseo_meta_filter_key( $filter );

		if( ! empty( $key ) ) {
			$meta_desc = trim( WPSEO_Meta::get_value( $key . '-gv-entry' ) );

			if ( ! empty( $meta_desc ) ) {
				$return = $this->process_merge_tags( $meta_desc );
			}
		}

		return $return;
	}
	
}

GravityView_Social_Meta::get_instance();